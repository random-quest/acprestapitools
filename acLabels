#!/bin/zsh
# https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-label/#api-group-label
source acp_lib `basename $0`
typeset -A subCommandUsages
subCommandUsages+=([count]="Count the number of labels. Usage:\n$acp_command %s (--attachmentId <attachmentId> ... | --blogpostId <blogpostId> ... | --pageId <pageId> ...)\n")
subCommandUsages+=([json]="Retrieve data in json format. Usage:\n$acp_command %s (--attachmentId <attachmentId> ... | --blogpostId <blogpostId> ... | --pageId <pageId> ...)\n")
subCommandUsages+=([csv]="Retrieves data in csv format. Usage:\n$acp_command %s (--attachmentId <attachmentId> ... | --blogpostId <blogpostId> ... | --pageId <pageId> ...) [--header (true | false)]\n\tavailable keys: $(printf "(%s)" ${(kj: | :)acp_LABEL_AVAILABLE_KEYS})\n")

function ac_Print_Help() {
  printf "\nHelp for %s commands:\n\n" $acp_command
  for subCommand subCommandUsage in ${(kv)subCommandUsages}; do
    printf "%s - " $subCommand
    printf "${subCommandUsage}\n" ${subCommand}
  done
  tabs -15
  printf "Valid values:\n"
  printf "  prefix\t(%s).\n" ${(kj: | :)acp_LABEL_PREFIX}
  printf "\n%s usage examples:\n" $acp_command
  tabs -5
  tabs -8
}

if [[ ${1:l} == "count" || ${1:l} == "json" || ${1:l} == "csv" ]]; then
  typeset subCommand=${1:l}
  shift
  zmodload zsh/zutil
  typeset -a flag_csv_header=("--header" "true")
  zparseopts -D -F -K {v,-verbose}=flag_verbose -header=flag_csv_header -attachmentId+:=option_Id -blogpostId+:=option_Id -pageId+:=option_Id
  if [ $? -gt 0 ]; then
    printf ${subCommandUsages[${subCommand}]} ${(k)subCommandUsages[${subCommand}]}
    exit
  fi
  if [ ${#option_Id[@]} -eq 0 ]; then
    printf "No selection\n${subCommandUsages[${subCommand}]}" ${(k)subCommandUsages[${subCommand}]}
    exit
  fi

  case $subCommand in
    "count")
      integer recordCount=0
      ;;
    "csv")
      if [[ ${flag_csv_header[2]} == "true" ]]; then
        printf "labelId,attachmentId,blogpostId,pageId,name,prefix\n"
      fi
      ;;
  esac

  # Main loop
  integer --r acp_LIMIT=${(v)acp_LIM[Max]}
  for opt value in $option_Id; do
    # determine endpoint
    rest_endpoint=""
    attachmentId="N/A"
    blogpostId="N/A"
    pageId="N/A"
    case $opt in
      "--attachmentId")
        rest_endpoint="attachments/${value}/labels"
        attachmentId=$value
        ;;
      "--blogpostId")
        rest_endpoint="blogposts/${value}/labels"
        blogpostId=$value
        ;;
      "--pageId")
        rest_endpoint="pages/${value}/labels"
        pageId=$value
        ;;
    esac
    acp_ACC_LINK="init"
    acp_ACC_LINK_REL="next"
    while [ ! -z $acp_ACC_LINK ] && [[ $acp_ACC_LINK_REL == "next" ]]; do
      if [[ $acp_ACC_LINK == "init" ]]; then
        curl_command="curl -i -s -X GET --url \"${acp_URL_WIKI2}${rest_endpoint}?limit=${acp_LIMIT}\" -u ${acp_AUTH} -H ${acp_HA_JSON}" 
        if [ -v flag_verbose ]; then
          echo $curl_command
        fi
        acp_HTTP_PARSE "`eval ${curl_command}`"
      else
        curl_command="curl -i -s -X GET --url \"${acp_URL_JIRA3_SITE}${acp_ACC_LINK}\" -u ${acp_AUTH} -H ${acp_HA_JSON}"
        if [ -v flag_verbose ]; then
          echo $curl_command
        fi
        acp_HTTP_PARSE "`eval ${curl_command}`"
      fi
      # is response OK?
      if [ ! -z ${(k)acp_WIKI2_HTTP_ERROR_RESPONSE_CODE[${acp_HTTP_RETURN_CODE}]} ]; then
        printf "%u,%s\n" ${(k)acp_WIKI2_HTTP_ERROR_RESPONSE_CODE[${acp_HTTP_RETURN_CODE}]} ${(v)acp_WIKI2_HTTP_ERROR_RESPONSE_CODE[${acp_HTTP_RETURN_CODE}]}
        continue
      fi
      # work cursor
      case $subCommand in
      "count")
        recordCount+=`echo $acp_JSON_STRING | grep "^{" | jq -r '.results | length'`
        ;;
      "json")
        echo $acp_JSON_STRING | jq '.results[]'
        ;;
      "csv")
        echo $acp_JSON_STRING | jq -r --arg attachmentId $attachmentId --arg blogpostId $blogpostId --arg pageId $pageId '.results[] | [ .id, $attachmentId, $blogpostId, $pageId, .name, .prefix ] | @csv'
        ;;
      esac
    done
  done
  # end of Main loop
  case ${subCommand} in
    "count")
      printf "%u\n" ${recordCount}
      ;;
  esac
  exit
fi

case ${1:l} in
"help")
  ac_Print_Help
  ;;

*)
  ac_Print_Help
  ;;
esac  
