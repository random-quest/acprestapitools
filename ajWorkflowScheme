#!/bin/zsh
# https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-schemes/#api-rest-api-3-workflowscheme-get
source ac_lib `basename $0`
function getAvailableKeys() {  
  availableKeysArray=(`curl -s -X GET --url "${ac_url}workflowscheme" -u "${ac_user}" -H "${h_a_json}" | jq -r '.values[0] | keys_unsorted | .[]'`)
  stringOfAvailableKeys=$(printf "(%s)" ${(j: | :)availableKeysArray})
}
getAvailableKeys

typeset -A commandUsages
commandUsages=([count]="%s:\t\tcounts the number of workflow schemes.\n\t\tArguments: none\n")
commandUsages+=([valuesbykey]="%s:\tretrieves values for keys(s).\n\t\tArguments: [-i <id> n] -k <key> n\n\t\tavailable keys: ${stringOfAvailableKeys}\n")
commandUsages+=([json]="%s:\t\treturns actors and their roles in json format. By default for all projects and roles.\n\t\tArguments: [-p <projectIdOrKey> n] [-r <roleId> n]\n")
commandUsages+=([csv]="%s:\t\treturns filters in csv format.\n\t\tArguments: [-k <key>]\n\t\tavailable keys: ${stringOfAvailableKeys}\n\t\tdefault keys: ${csv_default_Keys}\n")
commandUsages+=([delete]="%s:\t\tdelete filter(s)\n\t\tArguments: [-f <filterId> n]\n\t\t-s\tsilent mode\n")
commandUsages+=([template]="%s:\ttemplates a curl command\n\t\tArguments: none\n")

integer -r maxResults=50
integer recordCount
integer numPages

function count() {
  recordCount=`curl -s -X GET --url "${ac_url}workflowscheme" -u "$ac_user" -H "$h_a_json" | jq '.total'`
  numPages=${recordCount}/${maxResults}
}

function getAllValuesForKey() {
  if [ ! -z $1 ]; then
    count
    integer local_startIndex
    integer local_pageCounter
    for local_pageCounter in {0..$numPages}; do
      local_startIndex=${local_pageCounter}*${maxResults}
      curl -s -X GET --url "${ac_url}workflowscheme?startAt=${local_startIndex}&maxResults=${maxResults}" -u "$ac_user" -H "$h_a_json" | jq -r --arg key $1 '.values[][$key]'
    done
  else
    printf "getAllValuesForKey() needs \"key\" parameter\n"
  fi
}

case ${1:l} in 
"count")
  count
  printf "%u\n" ${recordCount}
  ;;

"valuesbykey")
  subCommand=${1:l}
  shift
  typeset -a option_IDs
  typeset -a option_Keys
  while getopts ":i:k:" opt; do
    case $opt in
    i)
      option_IDs+=$OPTARG
      ;;
    k)
      option_Keys+=$OPTARG
      ;;
    *)
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit  
      ;;
    esac
  done
  shift $((OPTIND-1))
  if [ ${#option_Keys[@]} -eq 0 ]; then
    printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
    exit  
  fi
  # 
  # work one option_Key and all IDs
  #
  if [ ${#option_IDs[@]} -eq 0 ]; then 
    getAllValuesForKey $option_Keys[1]
    # work done for subCommand
    exit
  fi
  #
  # work multiple Keys and one or more IDs
  #
  for Id in ${option_IDs}; do
    # https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-filters/#api-rest-api-3-filter-id-get
    http_response=`curl -i -s -X GET --url "${ac_url}workflowscheme/${Id}" -u "$ac_user" -H "$h_a_json"`
    http_return_code=`echo $http_response | grep "^HTTP" | awk '{print $2}'`
    http_json_string=`echo $http_response | grep "^{"`
    if [ $http_return_code -eq 200 ]; then
      typeset -a temp_array_jsonValues
      for key in ${option_Keys}; do
        temp_array_jsonValues+=`echo $http_json_string | jq -r --arg key ${key} '.[$key]'`
      done
      echo ${(j:,:)temp_array_jsonValues}
      unset temp_array_jsonValues
    fi
  done
  ;;

"csv")
  count
  integer startIndex
  integer pageCounter
  printf "id,name,description\n"
  for pageCounter in {0..$numPages}; do
    startIndex=${pageCounter}*${maxResults}
    curl -s -X GET --url "${ac_url}workflowscheme?startAt=${startIndex}&maxResults=${maxResults}" --user "${ac_user}" --header "${h_a_json}" | jq -r '.values[] | [ .id, .name, .description ] | @csv'
  done
  ;;

"delete")
# https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-schemes/#api-rest-api-3-workflowscheme-id-delete
  subCommand=${1:l}
  shift
  while getopts ":i:s" opt; do
    case $opt in
    i)
      if [ ! -v Array_Id_Name ]; then
        # initialize only once, when needed
        typeset -A Array_Id_Name=(`ajcWFS csv | sed "s/[\"'<>()&]//g" | sed "s/ /_/g" | awk -F ',' '{print $1 " " $2}' | tail -n +2`)
        typeset -A option_Array_Id_Name
      fi
      if [ ! -z ${Array_Id_Name[$OPTARG]} ]; then
        option_Array_Id_Name+=([$OPTARG]=${(v)Array_Id_Name[$OPTARG]})
      else
        printf "%s:\tid %s not valid\n" ${ac_command} $OPTARG
        exit
      fi
      ;;
    s)
      option_Silent="true"
      ;;
    *)
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit  
      ;;
    esac
  done
  shift $((OPTIND-1))
  if [ ! -v option_Array_Id_Name ]; then
    # emtpy option means work all
    typeset -A option_Array_Id_Name=(`ajcWFS csv | sed "s/[\"'<>()&]//g" | sed "s/ /_/g" | awk -F ',' '{print $1 " " $2}' | tail -n +2`)
  fi
  #
  # request user confirmation
  #
  if [ ! -v option_Silent ]; then
    printf "delete %u workflow" ${#option_Array_Id_Name[@]}
    if [ ${#option_Array_Id_Name[@]} -gt 1 ]; then
      printf "s"
    fi
    printf ":[\n"; 
    for Id Name in ${(kv)option_Array_Id_Name}; do
      printf "%s,%s\n" $Id $Name
    done
    printf "]\n"
    vared -p "Let's do it, yes? " -c YesNo
    if [[ ${YesNo} != [Yy]* ]]; then
      printf "All good, nothing happened.\n"
      exit
    fi
  fi
  #
  # delete - main
  #
  typeset -r LogFile="${ac_command}_${subCommand}_log_${timestampDateOnly}T${timestampTimeOnly}.csv"
  printf "id,name,result\n" | tee -a ${LogFile}
  for Id Name in ${(kv)option_Array_Id_Name}; do
    printf "%u,%s," ${Id} ${Name}| tee -a ${LogFile}
    http_response=`curl -i -s -X DELETE --url "${ac_url}workflowscheme/${Id}" --user "${ac_user}"`
    http_return_code=$(echo $http_response | grep "^HTTP" | awk '{print $2}')
    if [ $http_return_code -eq 204 ]; then
      printf "deleted\n" | tee -a ${LogFile}
    fi
    if [ $http_return_code -ge 400 ]; then
      json_error_response=`echo $http_response | grep "{\"errorMessage"`
      printf "%u-%s\n" $http_return_code ${json_error_response} | tee -a ${LogFile}
    fi
  done
  ;;
"help")
  printf "\nHelp for %s commands:\n\n" $(basename "$0")
  for command commandUsage in ${(kv)commandUsages}; do
    printf ${commandUsage} ${command}
    printf "\n"
  done
  printf "%s - usage examples:\n" $(basename "$0")
  ;;

*)
  $(basename "$0") help
  ;;
esac