#!/bin/zsh
typeset -r acp_command=$1

typeset -r acp_tools_app_name="acprestapitools"
typeset -r acp_tools_configuration_dir="$HOME/.$acp_tools_app_name/"
typeset -r acp_tools_active_site_file="$acp_tools_configuration_dir/acp_active_site"
typeset -r acp_tools_available_sites_file="$acp_tools_configuration_dir/acp_available_sites"
typeset -r acp_tools_active_user_file="$acp_tools_configuration_dir/acp_active_user"
typeset -r acp_tools_available_users_file="$acp_tools_configuration_dir/acp_available_users"

if [ ! -d $acp_tools_configuration_dir ]; then
  printf "New deployment. Creating configuration directory: \"%s\".\n" $acp_tools_configuration_dir
  mkdir -p $acp_tools_configuration_dir
  printf "<siteName>\n" > $acp_tools_available_sites_file
  printf "<siteName>\n" > $acp_tools_active_site_file
  printf "<Email>,<PAT>\n" > $acp_tools_available_users_file
  printf "<Email>\n" > $acp_tools_active_user_file
fi

if [ ! -f $acp_tools_active_site_file -o ! -f $acp_tools_active_user_file ]; then
  printf "No active site or user found in %s or %s, respectively.\n" $acp_tools_active_site_file $acp_tools_active_user_file
  return
fi

typeset -r acp_SITE_NAME=$(cat $acp_tools_active_site_file)
typeset -r acp_USER_NAME=$(cat $acp_tools_active_user_file)

# Atlassian Cloud Platform REST API base URLs
typeset -r acp_URL_SITE="https://${acp_SITE_NAME}.atlassian.net/"
typeset -r acp_URL_JIRA3="${acp_URL_SITE}rest/api/3/"
typeset -r acp_URL_SD="${acp_URL_SITE}rest/servicedeskapi/"
typeset -r acp_URL_WIKI2="${acp_URL_SITE}wiki/api/v2/"

# Atlassian Access User
typeset -r acp_AUTH="$acp_USER_NAME:$(cat $acp_tools_available_users_file | grep $acp_USER_NAME | awk -F ',' '{print$2}')"

# HTTP header constants
  # accept json
typeset -r acp_HA_JSON="Accept: application/json"
  # content type json
typeset -r acp_HCT_JSON="Content-Type: application/json"
  # content type png
typeset -r acp_HCT_PNG="Content-Type: image/png"
  # x-atlassian 
typeset -r acp_HAT_NOC="X-Atlassian-Token: no-check"
  # x-experimental
typeset -r acp_HEX_OPT="X-ExperimentalApi: opt-in"
# timestamps
  # date
typeset -r acp_TS_DATE="`date +%Y-%m-%d`"
  # time
typeset -r acp_TS_TIME="`date +%H-%M-%S`"
  # dateTtime
typeset -r acp_TS_DATETIME="`date +%Y-%m-%dT%H-%M-%S`"

# Paging Limits
typeset -Ar acp_LIM=([Min]=1 [Max]=250)

# Confluence Cloud Constants
typeset -Ar acp_SPACE_STATUS=([current]="&status=current" [archived]="&status=archived" [all]="")
typeset -Ar acp_SPACE_TYPE=([global]="&type=global" [personal]="&type=personal" [all]="")
typeset -Ar acp_SPACE_AVAILABLE_KEYS=([id]="id" [key]="key" [name]="name" [type]="type" [status]="status" [homepageId]="homepageId" [description]="description")
typeset -Ar acp_PAGE_STATUS=([current]="" [trashed]="" [historical]="" [deleted]="" [any]="" [draft]="" [archived]="")
typeset -Ar acp_PAGE_BODYFORMAT=([storage]="" [atlas_doc_format]="")
typeset -Ar acp_PAGE_AVAILABLE_KEYS=([id]="id" [status]="status" [title]="title" [spaceId]="spaceId" [parentId]="parentId" [authorId]="authorId" [createdAt]="createdAt")
typeset -Ar acp_LABEL_PREFIX=([my]="" [team]="" [global]="" [system]="")
typeset -Ar acp_LABEL_AVAILABLE_KEYS=([id]="id" [name]="name" [prefix]="prefix")
typeset -Ar acp_ATTACHMENT_AVAILABLE_KEYS=([id]="id" [status]="status" [title]="title" [mediaType]="mediaType" [mediaTypeDescription]="mediaTypeDescription" [comment]="comment" [fileSize]="fileSize" [webuiLink]="webuiLink" [downloadLink]="downloadLink")


function ac_get_simple() {
  printf "curl -s -X GET --url \"%s%s\" -u %s -H %s" ${acp_URL_JIRA3} $1 ${acp_AUTH} ${acp_HA_JSON}
}

function acp_HTTP_PARSE() {
  acp_HTTP_RETURN_CODE=`echo $1 | grep "^HTTP" | awk '{print $2}'`
  acp_link "`echo $1 | grep "^link"`"
  acp_link_rel "`echo $1 | grep "^link"`"
  acp_JSON_STRING=`echo $1 | sed -ne '/^{/,$ p' | tr -d '\n' | tr -d '\r' | tr -d '\t'`
}
function acp_link() {
  acp_ACC_LINK=`echo $1 | awk -F ';' '{print $1}' | awk '{print $2}' | sed "s/[<>]//g"`
}
function acp_link_rel() {
  acp_ACC_LINK_REL=`echo $1 | awk '{print $3}' | awk -F '=' '{print $2}' | sed "s/\"//g" | tr -d '\n' | tr -d '\r'`
}

function print_command_usage() {
  printf "Usage:\n  %s " ${acp_command}
  echo $*
  printf "\n"
} 

function is_keyword_valid() {
user_keyword=$1
shift
for a in $*; do
  if [[ $a == $user_keyword ]]
  then
    return 0
  fi
done
printf "Usage:\n  %s (" ${acp_command}
printf "$1"; shift
for a in $*; do
  printf " | %s" $a
done
printf ")\n"
return 2
}

if [[ $1 = "env" ]]; then
  printf "JSW URL: %s\n" ${acp_URL_JIRA3}
  printf "JSM URL: %s\n" ${acp_URL_SD}
  printf "CNF URL: %s\n" ${acp_URL_WIKI2}
  printf "Account: %s\n" ${acp_AUTH}
fi

