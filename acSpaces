#!/bin/zsh
# https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-space/#api-group-space
source ac_lib `basename $0`
typeset -A commandUsages
commandUsages+=([count]="Count the number of spaces. Usage:\n$ac_command %s [--status <status>] [--type <type>]\n")
commandUsages+=([json]="Retrieve data in json format. Usage:\n$ac_command %s [--status <status>] [--type <type>]\n")
commandUsages+=([csv]="Retrieve data in csv format. Usage:\n$ac_command %s [--status <status>] [--type <type>] [--column <key>0...3]\n\tavailable keys: $(printf "(%s)" ${(kj: | :)acc_SPACE_AVAILABLE_KEYS})\n")
commandUsages+=([delete]="Delete Space(s). [STDIN spaceKeys]. Usage:\n$ac_command %s -i <spaceKey n> [-v] [-s] -j <async_TaskId n>\n")

function ac_Print_Help() {
  printf "\nHelp for %s commands:\n\n" $ac_command
  for command commandUsage in ${(kv)commandUsages}; do
    printf "%s - " $command
    printf "${commandUsage}\n" ${command}
  done
  tabs -15
  printf "Options:\n"
  printf "  --status\t(%s) [default: all].\n" ${(kj: | :)acc_SPACE_STATUS}
  printf "  --type\t(%s) [default: all].\n" ${(kj: | :)acc_SPACE_TYPE}
  printf "  -v\tshow progress of asynchronous deletion.\n"
  printf "  -s\tsilent mode\n"
  printf "\n%s usage examples:\n" $ac_command
  tabs -5
  printf "  o) select by a name\n"
  printf "\t%s json | jq 'select(.name==\"name\")'\n" $ac_command
  printf "  o) count elements\n"
  printf "\t%s json | jq -s '[.][] | length'\n" $ac_command
  printf "\n"
  tabs -8
}

function getPercentageCompleteOfDeletionTask() {
  if [ -z $1 ]; then
    prinf "getPercentageCompleteOfDeletionTask() needs parameter\n"
    exit
  fi
  typeset -r local_async_task_url="$1"
  typeset -i local_percentageComplete=0
  local_percentageComplete=`curl -s -X GET --url "https://$(cat $HOME/conf/atlassian_cloud_site_name).atlassian.net/wiki/${async_task_url}" -u "${ac_user}" -H "${h_a_json}" | jq '.percentageComplete'`
  printf "%u" ${local_percentageComplete}
}


typeset -r Logfile_AsyncTasks="${ac_command}_Async_TaskIds.csv"
typeset -A lookup_Array_Id_Name
typeset -A option_Array_Id_Name

function populate_option_Array_Id_Name() {
  if [ ${#lookup_Array_Id_Name[@]} -eq 0 ]; then
    # initialize only once
    lookup_Array_Id_Name=(`accSpaces csv -s all -t all | sed "s/[\"'<>()&/]//g" | sed "s/ /_/g" | awk -F ',' '{print $2 " " $3}' | tail -n +2`)
  fi
  if [ ! -z ${lookup_Array_Id_Name[$1]} ]; then
    option_Array_Id_Name+=([$1]=${(v)lookup_Array_Id_Name[$1]})
  else
    printf "\n%s:\tid %s not valid.\n" ${subCommand} $1
    exit
  fi
}

function populate_option_Array_Id_Name_from_STDIN() {
  if [ ! -z $ac_STDIN ]; then
    typeset local_id
    for local_id in $ac_STDIN; do
      populate_option_Array_Id_Name $local_id
    done
  fi
}

if [[ ${1:l} == "count" || ${1:l} == "json" || ${1:l} == "csv" ]]; then
  typeset subCommand=${1:l}
  shift
  typeset -a option_status=("--status" "all")
  typeset -a option_type=("--type" "all")
  zmodload zsh/zutil
  zparseopts -D -F -K {v,-verbose}=flag_verbose -status:=option_status -type:=option_type -column+:=option_column
  if [ $? -gt 0 ]; then
    printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
    exit
  fi
  # validate options
  if [ -z ${(k)acc_SPACE_STATUS[${option_status[2]}]} ]; then
    printf "invalid status\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    exit
  fi
  if [ -z  ${(k)acc_SPACE_TYPE[${option_type[2]}]} ]; then
    printf "invalid type\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    exit
  fi
  if [ ${#option_column[@]} -gt 6 ]; then
    printf "maximum num of --column options exceeded\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    exit
  fi
  for opt column in $option_column; do
    if [ -z ${(k)acc_SPACE_AVAILABLE_KEYS[${column}]} ]; then
      printf "bad column\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    else
      option_column_headers+=",${(k)acc_SPACE_AVAILABLE_KEYS[${column}]}"
    fi
  done
  # Pre-loop statements
  case $subCommand in
    "count")
      integer recordCount=0
      ;;
    "csv")
      if [ ${#option_column[@]} -eq 0 ]; then
        printf "spaceId,key,name,type,status,homepageId,description\n"
      else
        printf "spaceId%s\n" $option_column_headers
      fi
      ;;
  esac
  # Main loop
  ac_ACC_LINK="init"
  ac_ACC_LINK_REL="next"
  integer -r ac_LIMIT=${(v)ac_LIM[Max]}
  while [ ! -z $ac_ACC_LINK ] && [[ $ac_ACC_LINK_REL == "next" ]]; do
    if [[ $ac_ACC_LINK == "init" ]]; then
      curl_command="curl -i -s -X GET --url \"${ac_URL_WIKI2}spaces?limit=${ac_LIMIT}${(v)acc_SPACE_STATUS[${option_status[2]}]}${(v)acc_SPACE_TYPE[${option_type[2]}]}\" -u ${ac_AUTH} -H ${acHA_JSON}"
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi
      ac_HTTP_PARSE "`eval ${curl_command}`"
    else
      curl_command="curl -i -s -X GET --url \"${ac_URL_SITE}${ac_ACC_LINK}\" -u ${ac_AUTH} -H ${acHA_JSON}"
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi
      ac_HTTP_PARSE "`eval ${curl_command}`"
    fi
    # Work cursor
    case $subCommand in
    "count")
      recordCount+=`echo $ac_JSON_STRING | grep "^{" | jq -r '.results | length'`
      ;;
    "json")
      echo $ac_JSON_STRING | jq '.results[]'
      ;;
    "csv")
      if [ ${#option_column[@]} -eq 0 ]; then
        echo $ac_JSON_STRING | jq -r '.results[] | [ .id, .key, .name, .type, .status, .homepageId, .description ] | @csv'
      fi
      if [ ${#option_column[@]} -eq 2 ]; then
        echo $ac_JSON_STRING | jq -r --arg key1 ${option_column[2]} '.results[] | [ .id, .[$key1] ] | @csv'
      fi
      if [ ${#option_column[@]} -eq 4 ]; then
        echo $ac_JSON_STRING | jq -r --arg key1 ${option_column[2]} --arg key2 ${option_column[4]} '.results[] | [ .id, .[$key1], .[$key2] ] | @csv'
      fi
      if [ ${#option_column[@]} -eq 6 ]; then
        echo $ac_JSON_STRING | jq -r --arg key1 ${option_column[2]} --arg key2 ${option_column[4]} --arg key3 ${option_column[6]} '.results[] | [ .id, .[$key1], .[$key2], .[$key3] ] | @csv'
      fi
      ;;
    esac
  done
  # Post-loop statements
  case $subCommand in
    "count")
      printf "%u\n" ${recordCount}
      ;;
  esac
  exit
fi


case ${1:l} in
"delete")
# https://developer.atlassian.com/cloud/confluence/rest/v1/api-group-space/#api-wiki-rest-api-space-spacekey-delete
  subCommand=${1:l}
  shift
  populate_option_Array_Id_Name_from_STDIN
  zmodload zsh/zutil
  zparseopts -D -F -K {v,-verbose}=flag_verbose {s,-silent}=flag_silent -spaceId:=option_id  -deleteall=flag_deleteall -deletionstatus=flag_deletionstatus
  if [ $? -gt 0 ]; then
    printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
    exit
  fi
  # populate id name array
  for opt id in $option_id; do
    populate_option_Array_Id_Name $id
  done
  # validate other options
  if [ -v flag_deleteall -a -v flag_deletionstatus ]; then
    printf "--deleteall and --deletionstatus are mutually exclusive.\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    exit
  fi

  if [ -v flag_deletionstatus ]; then
    if [ ${#option_Array_Id_Name[@]} -gt 0 ]; then
      for Id in $option_Array_Id_Name; do
        async_task_url=`grep -E "^${Id}" ${Logfile_AsyncTasks} | awk -F ',' '{print $3}'`
        if [ -z ${async_task_url} ]; then
          printf "SpaceKey \"%s\" not found in file \"%s\".\n" ${2:u} ${Logfile_AsyncTasks}
        else
          printf "%s,%u\n" ${Id} `getPercentageCompleteOfDeletionTask ${async_task_url}`
        fi
      done
    else
      printf "\"%s\" contains %u entrie(s):\n" ${Logfile_AsyncTasks} `cat ${Logfile_AsyncTasks} | wc -l`
      cat ${Logfile_AsyncTasks} | while read line; do
        async_task_url=`echo ${line} | awk  -F ',' '{print $3}'`
        printf "%s,%u\n" `echo ${line} | awk  -F ',' '{print $1}'` `getPercentageCompleteOfDeletionTask ${async_task_url}`
      done
    fi
    exit
    # done for subCommand
  fi
  #
  # emtpy option means work all spaces
  #
  if [ ! -v option_Array_Id_Name ]; then
    typeset -A option_Array_Id_Name=(`accSpaces csv -s all -t all | sed "s/[\"'<>()&/]//g" | sed "s/ /_/g" | awk -F ',' '{print $2 " " $3}' | tail -n +2`)
  fi
  #
  # request user confirmation
  #
  if [ ! -v option_Silent ]; then
    printf "delete %u space" ${#option_Array_Id_Name[@]}
    if [ ${#option_Array_Id_Name[@]} -gt 1 ]; then
      printf "s"
    fi
    printf ":[\n"; 
    for Id Name in ${(kv)option_Array_Id_Name}; do
      printf "%-40s,%-70s\n" $Id $Name
    done
    printf "]\n"
    vared -p "Let's do it, yes? " -c YesNo
    if [[ ${YesNo} != [Yy]* ]]; then
      printf "All good, nothing happened.\n"
      exit
    fi
  fi
  #
  # rotate Logfile_AsyncTasks?
  # FIXME use var/log and the rotate mechanism
  #
  if [ -f ${Logfile_AsyncTasks} ]; then
    integer records_in_Logfile_AsyncTasks=`cat ${Logfile_AsyncTasks} | wc -l`
    vared -p "${records_in_Logfile_AsyncTasks} previously deleted spaces in \"${Logfile_AsyncTasks}\" file. Rotate file, yes? " -c YesNo_Logfile_AsyncTasks
    if [[ ${YesNo_Logfile_AsyncTasks} == [Yy]* ]]; then 
      mv ${Logfile_AsyncTasks} ${Logfile_AsyncTasks}_${timestampDateOnly}T${timestampTimeOnly}.csv
    fi  
  fi
  #
  # main loop
  #
  typeset -r LogFile="${ac_command}_${subCommand}_log_${timestampDateOnly}T${timestampTimeOnly}.tsv"
  printf "spaceKey,name,result\n" | tee -a ${LogFile}
  for Id Name in ${(kv)option_Array_Id_Name}; do
    http_response=`curl -i -s -X DELETE --url "${ac_wiki_url}space/${Id}" -u "${ac_user}" -H "${h_a_json}"`
    http_return_code=`echo ${http_response} | grep "^HTTP" | awk '{print $2}'`
    json_response=`echo $http_response | grep "^{"`
    printf "%s,%s," ${Id} ${Name} | tee -a ${LogFile} ${Logfile_AsyncTasks}
    if [ $http_return_code -eq 202 ]; then
      sleep 1
      async_task_url=`echo ${json_response} | jq -r '.links.status'`
      printf "%s\n" ${async_task_url} >> ${Logfile_AsyncTasks}
      printf "%u\n" `getPercentageCompleteOfDeletionTask ${async_task_url}`
    fi
    if [ $http_return_code -ge 400 ]; then
      errorMessage=`echo ${json_response} | jq '.data.errors[0].message.translation'`
      printf "%u-%s\n" ${http_return_code} ${errorMessage} | tee -a ${LogFile}
    fi
  done
  ;;

"help")
  ac_Print_Help
  ;;

*)
  ac_Print_Help
  ;;
esac  
