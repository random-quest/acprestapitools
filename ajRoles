#!/bin/zsh
# based on https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-project-roles/#api-rest-api-3-role-get
source ac_lib `basename $0`
function getAvailableKeys() {  
  availableKeysArray=(`curl -s -X GET --url "${ac_url}role" -u "${ac_user}" -H "${h_a_json}" | jq -r '.[0] | keys_unsorted | .[]'`)
  stringOfAvailableKeys=$(printf "(%s)" ${(j: | :)availableKeysArray})
}
getAvailableKeys

typeset -A commandUsages
commandUsages=([count]="%s:\t\tcounts the number of roles.\n\t\tArguments: none\n")
commandUsages+=([valuesbykey]="%s:\tretrieves values for a key.\n\t\tArguments: <key>\n\t\tavailable keys: ${stringOfAvailableKeys}\n")
commandUsages+=([listkeys]="%s:\tlists the json object keys (root keys only).\n\t\tArguments: none\n")
commandUsages+=([json]="%s:\t\treturns the json of all roles.\n\t\tArguments: none\n")
commandUsages+=([csv]="%s:\t\treturns a csv of all roles.\n\t\tArguments: none\n")
commandUsages+=([delete]="%s:\tdeletes roles.\n\t\tArguments: ( -a | <roleId> [<roleId> n])\n")

function getValuesByKey() {
  if [ ! -z $1 ]; then
    curl -s -X GET --url "${ac_url}role" -u "${ac_user}" -H "${h_a_json}" | jq -r --arg key $1 '.[] | select(.name != "atlassian-addons-project-access")[$key]'
  else
    printf "getValuesByKey() needs \"key\" parameter\n"
  fi
}

case ${1:l} in
"count")
  curl -s -X GET --url "${ac_url}role" -u "${ac_user}" -H "${h_a_json}" | jq 'length - 1'
  ;;

"valuesbykey")
  if [ ! -z $2 ]; then
    getValuesByKey $2
  else
    printf ${commandUsages[${1:l}]} ${(k)commandUsages[${1:l}]}
  fi
  ;;

"listkeys")
  for availableKey in ${availableKeysArray}; do
    printf "%s\n" ${availableKey}
  done
  ;;

"json")
     curl -s -X GET --url "${ac_url}role" -u "${ac_user}" -H "${h_a_json}" | jq '.[] | select(.name != "atlassian-addons-project-access")'
     ;;

"csv")
  printf "roleId,roleName,roleDescription\n"
  curl -s -X GET --url "${ac_url}role" -u "${ac_user}" -H "${h_a_json}" | jq -r '.[] | select(.name != "atlassian-addons-project-access") | [ .id, .name, .description ] | @csv'
  ;;

"delete")
# https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-project-roles/#api-rest-api-3-role-id-delete
  if [ ! -z $2 ]; then
    shift
    option_DeleteAll="false"
    while getopts "a" opt; do
      case $opt in
      a)
        option_DeleteAll="true"
        ;;
      esac
    done
    shift $((OPTIND-1))

    typeset -r deleteLogFile="ajcRoles_DeleteLog_${timestampDateOnly}T${timestampTimeOnly}.csv"
    typeset -a roleIds
    if [[ ${option_DeleteAll} == "true" ]]; then
      roleIds=(`getValuesByKey id`)
    else
      typeset -a temp_roleIds=(`getValuesByKey id`)
      for roleId in $*; do
        for r in ${temp_roleIds}; do
          if [[ ${roleId} == ${r} ]]; then
            roleIds+=${roleId}
            continue
          fi
        done
        shift
      done
    fi

    for roleId in ${roleIds}; do
      printf "%s," ${roleId} | tee -a ${deleteLogFile}
      http_response=`curl -i -s -X DELETE --url "${ac_url}role/${roleId}" -u "${ac_user}"`
      http_return_code=`echo ${http_response} | grep "^HTTP" | awk '{print $2}'`
      if [ 204 -eq ${http_return_code} ]
      then
        printf "deleted\n" | tee -a ${deleteLogFile}
      else
        json_error_response=`echo $http_response | grep -E "{\"errorMessages" | jq -r '.errorMessages[]'`
        printf "%u-%s\n" ${http_return_code} ${json_error_response} | tee -a ${deleteLogFile}
      fi
    done
  else
    printf ${commandUsages[${1:l}]} ${(k)commandUsages[${1:l}]}
  fi
  ;;

"help")
  printf "\nHelp for %s commands:\n\n" $(basename "$0")
  for command commandUsage in ${(kv)commandUsages}; do
    printf ${commandUsage} ${command}
    printf "\n"
  done
  printf "%s - usage examples:\n" $(basename "$0")
  printf "  %s csv | xsv table\n" $(basename "$0")
  printf "  %s csv | xsv select roleId,roleName | xsv table\n" $(basename "$0")
  printf "Look up roleId by roleName:\n"
  printf "  %s csv | xsv search -s roleName \"^<roleName>\" | xsv select roleId | tail -n +2\n" $(basename "$0")
  printf "Look at a specific json record\n"
  printf "  %s json | jq 'select(.name==\"Users\")'\n" $(basename "$0")
  ;;

*)
  $(basename "$0") help
  ;;
esac
