#!/bin/zsh
# https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-attachment/#api-pages-id-attachments-get
source acp_lib `basename $0`

typeset -A subCommandUsages
subCommandUsages+=([count]="%s:\t\tcounts the number of attachments.\n\t\tArguments: <pageId>\n")
subCommandUsages+=([json]="%s:\t\tretrievs pages in json format.\n\t\tArguments: <pageId>\n")
subCommandUsages+=([csv]="%s:\t\tretrievs pages in csv format.\n\t\tArguments: <pageId>\n")


function getValueByKey() {
  if [ ! -z $1 -a ! -z $2 ]; then
    acp_ACC_LINK="init"
    acp_ACC_LINK_REL="next"
    while [[ ! -z $acp_ACC_LINK && $acp_ACC_LINK_REL == "next" ]]; do
      if [[ $acp_ACC_LINK == "init" ]]; then
        acp_HTTP_PARSE "`curl -i -s -X GET --url "${acp_URL_WIKI2}pages/$1/attachments?limit=${acp_LIMIT}" -u "${acp_AUTH}" -H "${acp_HA_JSON}"`"
      else
        acp_HTTP_PARSE "`curl -i -s -X GET --url "${acp_URL_JIRA3_SITE}${acp_ACC_LINK}" -u "${acp_AUTH}" -H "${acp_HA_JSON}"`"
      fi
      echo $acp_JSON_STRING | jq -r --arg e $2 '.results[][$e]'
    done
  else
    printf "Function getValueByKey() is missing parameters.\n"
  fi
}

if [[ ${1:l} == "count" || ${1:l} == "json" || ${1:l} == "csv" ]]; then
  typeset subCommand=${1:l}
  shift
  zmodload zsh/zutil
  zparseopts -D -F -K {v,-verbose}=flag_verbose -column+:=option_column -pageId+:=option_id -inputFile:=option_filename
  if [ $? -gt 0 ]; then
    printf ${subCommandUsages[${subCommand}]} ${(k)subCommandUsages[${subCommand}]}
    exit
  fi
  # populate array
  typeset -a pageIds
  for opt id in $option_id; do
    pageIds+=("${id}")
  done
  if [ ${#option_filename} -gt 0 ]; then
    if [ -f "${option_filename[2]}" ]; then
      pageIds=(`xsv select id "${option_filename[2]}" | tail -n +2 | tr '\n' ' '`)
    else
      printf "file not found\n"
      exit
    fi
  fi
  if [ ${#pageIds} -eq 0 ]; then
    printf "--pageId option is mandatory\n${subCommandUsages[${subCommand}]}" ${(k)subCommandUsages[${subCommand}]}
    exit
  fi
  if [ ${#option_column[@]} -gt 6 ]; then
    printf "maximum num of --column options exceeded\n${subCommandUsages[${subCommand}]}" ${(k)subCommandUsages[${subCommand}]}
    exit
  fi
  for opt column in $option_column; do
    if [ -z ${(k)acp_ATTACHMENT_AVAILABLE_KEYS[${column}]} ]; then
      printf "bad column\n${subCommandUsages[${subCommand}]}" ${(k)subCommandUsages[${subCommand}]}
      exit
    else
      option_column_headers+=",${(k)acp_ATTACHMENT_AVAILABLE_KEYS[${column}]}"
    fi
  done

  # Opening statements
  case $subCommand in
    "count")
      integer recordCount=0
      ;;
    "csv")
      printf "pageId,attId,status,title,mediaType,comment,fileSize,webuiLink,downloadLink\n"
      ;;
  esac
  # Main loop
  for pageId in $pageIds; do
    acp_ACC_LINK="init"
    acp_ACC_LINK_REL="next"
    while [ ! -z $acp_ACC_LINK ] && [[ $acp_ACC_LINK_REL == "next" ]]; do
      if [[ $acp_ACC_LINK == "init" ]]; then
        curl_command="curl -i -s -X GET --url \"${acp_URL_WIKI2}pages/$pageId/attachments?limit=${acp_LIMIT}\" -u \"${acp_AUTH}\" -H \"${acp_HA_JSON}\""
      else
        curl_command="curl -i -s -X GET --url \"${acp_URL_JIRA3_SITE}${acp_ACC_LINK}\" -u \"${acp_AUTH}\" -H \"${acp_HA_JSON}\""
      fi
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi
      acp_HTTP_PARSE "`eval $curl_command`"
      # Work cursor
      case $subCommand in
      "count")
        recordCount+=`echo $acp_JSON_STRING | grep "^{" | jq -r '.results | length'`
        ;;
      "json")
        echo $acp_JSON_STRING | jq '.results[]'
        ;;
      "csv")
        echo $acp_JSON_STRING | jq -r --arg pageId ${pageId} '.results[] | [ $pageId, .id, .status, .title, .mediaType, .comment, .fileSize, .webuiLink, .downloadLink ] | @csv'
        ;;
      esac
    done
  done
  # Closing statements
  case $subCommand in
    "count")
      printf "%u\n" ${recordCount}
      ;;
  esac
  exit
fi

case ${1:l} in
"valuesbykey")
   if [ ! -z $2 -a ! -z $3 ]; then
    getValueByKey $2 $3
  else
    printf ${commandUsages[${1:l}]} ${(k)commandUsages[${1:l}]}
  fi 
  ;;

"help")
  printf "\nHelp for %s commands:\n\n" $acp_command
  for command commandUsage in ${(kv)commandUsages}; do
    printf ${commandUsage} ${command}
    printf "\n"
  done
  printf "%s - usage examples:\n" $acp_command
  printf "  o) Find top 50 biggest attachments\n"
  printf "\taccPages csv > %s_all_pages_%s.csv\n" $ac_SITE_NAME $acp_TS_DATETIME
  printf "\t%s csv -f %s_all_pages_%s.csv > %s_all_attachment_%s.csv\n" $acp_command $ac_SITE_NAME $acp_TS_DATETIME $ac_SITE_NAME $acp_TS_DATETIME
  printf "\txsv index %s_all_attachment_%s.csv\n" $ac_SITE_NAME $acp_TS_DATETIME
  printf "\tcat %s_all_attachment_%s.csv | xsv select pageId,attId,mediaType,webuiLink,fileSize | xsv sort -N -R -s fileSize | xsv table | head -51\n" $ac_SITE_NAME $acp_TS_DATETIME
  printf "  o) json: count elements\n"
  printf "\t%s json | jq -s '[.][] | length'\n" $acp_command
  ;;

*)
  $acp_command help
  ;;
esac  
