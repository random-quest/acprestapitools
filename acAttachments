#!/bin/zsh
# https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-space/#api-group-space
source ac_lib `basename $0`
integer -r ac_LIMIT=250
typeset -A commandUsages
commandUsages+=([count]="%s:\t\tcounts the number of pages.\n\t\tArguments: <pageId>\n")
commandUsages+=([valuesbykey]="%s:\tretrieves values for a key.\n\t\tArguments: <pageId> <key>\n\t\tavailable keys: (id|status|title|mediaType|mediaTypeDescription|comment|fileSize|webuiLink|downloadLink)\n\t\tvalid valaues for status: (current|trashed|historical|deleted|any|draft|archived)\n")
commandUsages+=([json]="%s:\t\tretrievs pages in json format.\n\t\tArguments: <pageId>\n")
commandUsages+=([csv]="%s:\t\tretrievs pages in csv format.\n\t\tArguments: <pageId>\n")

function getValueByKey() {
  if [ ! -z $1 -a ! -z $2 ]; then
    ac_ACC_LINK="init"
    ac_ACC_LINK_REL="next"
    while [[ ! -z $ac_ACC_LINK && $ac_ACC_LINK_REL == "next" ]]; do
      if [[ $ac_ACC_LINK == "init" ]]; then
        ac_HTTP_PARSE "`curl -i -s -X GET --url "${ac_URL_WIKI2}pages/$1/attachments?limit=${ac_LIMIT}" -u "${ac_AUTH}" -H "${acHA_JSON}"`"
      else
        ac_HTTP_PARSE "`curl -i -s -X GET --url "${ac_URL_SITE}${ac_ACC_LINK}" -u "${ac_AUTH}" -H "${acHA_JSON}"`"
      fi
      echo $ac_JSON_STRING | jq -r --arg e $2 '.results[][$e]'
    done
  else
    printf "Function getValueByKey() is missing parameters.\n"
  fi
}

if [[ ${1:l} == "count" || ${1:l} == "json" || ${1:l} == "csv" ]]; then
  typeset subCommand=${1:l}
  shift
  typeset -a option_pageIds
  while getopts ":i:f:" opt; do
    case $opt in
    i)
      option_pageIds+=$OPTARG
      ;;
    f)
      if [ -f $OPTARG ]; then
        option_pageIds=(`xsv select id $OPTARG | tail -n +2 | tr '\n' ' '`)
      else
        printf "file not found\n"
        exit
      fi
      ;;
    *)
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit  
      ;;
    esac
  done
  shift $((OPTIND-1))
  # Opening statements
  case $subCommand in
    "count")
      integer recordCount=0
      ;;
    "csv")
      printf "pageId,attId,status,title,mediaType,comment,fileSize,webuiLink,downloadLink\n"
      ;;
  esac
  # Main loop
  for pageId in $option_pageIds; do
    ac_ACC_LINK="init"
    ac_ACC_LINK_REL="next"
    while [ ! -z $ac_ACC_LINK ] && [[ $ac_ACC_LINK_REL == "next" ]]; do
      if [[ $ac_ACC_LINK == "init" ]]; then
        ac_HTTP_PARSE "`curl -i -s -X GET --url "${ac_URL_WIKI2}pages/$pageId/attachments?limit=${ac_LIMIT}" -u "${ac_AUTH}" -H "${acHA_JSON}"`"
      else
        ac_HTTP_PARSE "`curl -i -s -X GET --url "${ac_URL_SITE}${ac_ACC_LINK}" -u "${ac_AUTH}" -H "${acHA_JSON}"`"
      fi
      # Work cursor
      case $subCommand in
      "count")
        recordCount+=`echo $ac_JSON_STRING | grep "^{" | jq -r '.results | length'`
        ;;
      "json")
        echo $ac_JSON_STRING | jq '.results[]'
        ;;
      "csv")
        echo $ac_JSON_STRING | jq -r --arg pageId ${pageId} '.results[] | [ $pageId, .id, .status, .title, .mediaType, .comment, .fileSize, .webuiLink, .downloadLink ] | @csv'
        ;;
      esac
    done
  done
  # Closing statements
  case $subCommand in
    "count")
      printf "%u\n" ${recordCount}
      ;;
  esac
  exit
fi

case ${1:l} in
"valuesbykey")
   if [ ! -z $2 -a ! -z $3 ]; then
    getValueByKey $2 $3
  else
    printf ${commandUsages[${1:l}]} ${(k)commandUsages[${1:l}]}
  fi 
  ;;

"help")
  printf "\nHelp for %s commands:\n\n" $(basename "$0")
  for command commandUsage in ${(kv)commandUsages}; do
    printf ${commandUsage} ${command}
    printf "\n"
  done
  printf "%s - usage examples:\n" $(basename "$0")
  printf "  o) Find top 50 biggest attachments\n"
  printf "\taccPages csv > %s_all_pages_%s.csv\n" $ac_SITE_NAME $ac_TS_DATETIME
  printf "\t%s csv -f %s_all_pages_%s.csv > %s_all_attachment_%s.csv\n" $ac_command $ac_SITE_NAME $ac_TS_DATETIME $ac_SITE_NAME $ac_TS_DATETIME
  printf "\txsv index %s_all_attachment_%s.csv\n" $ac_SITE_NAME $ac_TS_DATETIME
  printf "\tcat %s_all_attachment_%s.csv | xsv select pageId,attId,mediaType,webuiLink,fileSize | xsv sort -N -R -s fileSize | xsv table | head -51\n" $ac_SITE_NAME $ac_TS_DATETIME
  printf "  o) json: count elements\n"
  printf "\t%s json | jq -s '[.][] | length'\n" $ac_command

  ;;

*)
  $(basename "$0") help
  ;;
esac  
