#!/bin/zsh
# https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-notification-schemes/#api-group-issue-notification-schemes
source acp_lib `basename $0`
declare -a available_keywords=("count" "get" "csv" "json" "delete")
if [[ -z $1 ]]; then; user_keyword="hugo"; else; user_keyword=$1; fi
if ! is_keyword_valid ${user_keyword} ${available_keywords[@]}; then; exit 0; fi
integer -r G_maxResults=50
integer G_count
integer G_numPages

function count() {
  typeset -r json_response=`curl -s -X GET --url "${acp_URL_JIRA3}fieldconfiguration" -u "${acp_AUTH}" -H "${acp_HA_JSON}" | jq`
  G_count=`echo ${json_response} | jq '.total'`
  G_numPages=${G_count}/${G_maxResults}
}

function getElement() {
  count
  typeset -r jsonElement=$1
  for page in `seq 0 ${G_numPages}`; do
    integer startIndex=${page}*${G_maxResults}
    curl -s -X GET --url "${acp_URL_JIRA3}fieldconfiguration?startAt=${startIndex}&maxResults=${G_maxResults}" -u "${acp_AUTH}" -H "${acp_HA_JSON}" | jq -r --arg e $jsonElement '.values[][$e]' | sort
  done
}

case $1 in
"count")
  count
  printf "%u\n" ${G_count}
  ;;

"get")
  if [ -z $2 ]; then
    print_command_usage $1 "(id | name | self)"
    exit
  fi
  getElement $2
  ;;

"csv")
  count
  for page in `seq 0 ${G_numPages}`; do
    integer startIndex=${page}*${G_maxResults}
    curl -s -X GET --url "${acp_URL_JIRA3}fieldconfiguration?startAt=${startIndex}&maxResults=${G_maxResults}" -u "${acp_AUTH}" -H "${acp_HA_JSON}" | jq -r '.values[] | [ .id, .name, .description ] | @csv'
  done
  ;;

"json")
  count
  for page in `seq 0 ${G_numPages}`; do
    integer startIndex=${page}*${G_maxResults}
    curl -s -X GET --url "${acp_URL_JIRA3}fieldconfiguration?startAt=${startIndex}&maxResults=${G_maxResults}" -u "${acp_AUTH}" -H "${acp_HA_JSON}" | jq '.values[]'
  done
  ;;

"delete")
# https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-field-configurations/#api-rest-api-3-fieldconfiguration-id-delete
  typeset -r deleteLogFile="ajcFC_DeleteLog_${acp_TS_DATE}T${acp_TS_TIME}.csv"
  if [ -z $2 ]; then
    print_command_usage $1 "(fieldConfigurationId | X)"
    exit
  fi
  typeset -a fieldConfigurationIds
  if [[ ${2:u} == "X" ]]; then
    fieldConfigurationIds=(`getElement id`)
  else
    fieldConfigurationIds=$2
  fi
  for fieldConfigurationId in ${fieldConfigurationIds}; do
    printf "%u," ${fieldConfigurationId} | tee -a ${deleteLogFile}
    http_response=`curl -i -s -X DELETE --url "${acp_URL_JIRA3}fieldconfiguration/${fieldConfigurationId}" -u "${acp_AUTH}"`
    http_return_code=$(echo $http_response | grep "^HTTP" | awk '{print $2}')
    if [ $http_return_code -eq 204 ]; then
      printf "deleted\n" | tee -a ${deleteLogFile}
      continue
    fi
    if [ $http_return_code -ge 400 ]; then
      json_error_response=`echo $http_response | grep -E "{\"errorMessage"`
      printf "%u-%s\n" $http_return_code ${json_error_response} | tee -a ${deleteLogFile}
      continue
    fi
  done
  ;;
esac