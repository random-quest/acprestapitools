#!/bin/zsh

source ac_lib `basename $0`
declare -a available_keywords=("help" "count" "get" "csv" "json" "getUserGroups" "csvUserGroups" "getAccountIdByDisplayName" "getDisplayNameByAccountId" "delete_all")
if [[ -z $1 ]]; then; user_keyword="hugo"; else; user_keyword=$1; fi
if ! is_keyword_valid ${user_keyword} ${available_keywords[@]}; then; exit 0; fi

declare -i max_results=500
declare -i num_results=0
declare -i total_results=0

function count() {
while : ; do
  num_results=`curl -s -X GET --url "${ac_url}users/search?startAt=${total_results}&maxResults=${max_results}" -u ${ac_user} -H ${h_a_json} | jq '. | length'`
  total_results=total_results+num_results
  if [ $num_results -lt $max_results ]; then; break; fi
done
}

function getElement() {
count
num_pages=$(($total_results/$max_results))
user_element=$1
for i in `seq 0 $num_pages`; do
  curl -s -X GET --url "${ac_url}users/search?startAt=$(($i*${max_results}))&maxResults=${max_results}" -u "$ac_user" -H "$h_a_json" | jq -r --arg e $user_element '.[] | select(.accountType == "atlassian")[$e]'
done
}

case $1 in
"count")
  count
  printf "%u\n" $total_results
  ;;

"get")
  if [ -z $2 ]; then
    print_command_usage $1 "(displayName | accountId)"
    exit
  fi
  getElement $2
  ;;

"getAccountIdByDisplayName")
  if [ -z $2 ]; then
    print_command_usage $1 "displayName"
    exit
  fi
  aacUsers csv | xsv search -s active true | xsv search -i -s displayName $2 | tail -n +2 | awk -F ',' '{print $1}'
  ;;

"getDisplayNameByAccountId")
  if [ -z $2 ]; then
    print_command_usage $1 "accountId"
    exit
  fi
  result=`curl -s -X GET --url "${ac_url}user?accountId=${2}" -u "$ac_user" -H "$h_a_json" | jq -r '.displayName'`
  if [[ $result != "null" ]]; then
    echo $result
  fi
  ;;

"getUserGroups")
  if [ -z $2 ]; then
    print_command_usage $1 "accountId"
    exit
  else
    curl -s -X GET --url "${ac_url}user/groups?accountId=$2" -u "$ac_user" -H "$h_a_json" | jq '.[].name'
  fi
  ;;

"csvUserGroups")
  if [ -z $2 ]; then
    print_command_usage $1 "accountId"
    exit
  else  
    curl -s -X GET --url "${ac_url}user?accountId=${2}&expand=groups" -u "$ac_user" -H "$h_a_json" | jq -r --arg u $2 '.groups.items[] | [ $u, .groupId, .name ] | @csv'
  fi
  ;;

"csv")
  count
  num_pages=$(($total_results/$max_results))
  printf "accountId,active,displayName,url\n"
  for i in `seq 0 $num_pages`; do
    curl -s -X GET --url "${ac_url}users/search?startAt=$(($i*${max_results}))&maxResults=${max_results}" -u "$ac_user" -H "$h_a_json" | jq -r '.[] | select(.accountType == "atlassian") | [ .accountId, .active, .displayName, .self ] | @csv'
  done
  ;;

"json")
  count
  num_pages=$(($total_results/$max_results))
  for i in `seq 0 $num_pages`; do
    curl -s -X GET --url "${ac_url}users/search?startAt=$(($i*${max_results}))&maxResults=${max_results}" -u "$ac_user" -H "$h_a_json" | jq '.[] | select(.accountType == "atlassian")'
  done
  ;;

"delete_all")
  SELF=`basename $0 | awk -F '.' '{print $1}'`
  echo "${timestampDateOnly} ${timestampTimeOnly}" >> $SELF.error.log
  for n in `getElement accountId`
  do
    echo -n "Deleting User $n..."
    HTTP_RESPONSE=$(curl -i -s -X DELETE --url "${ac_url}user?accountId=$n" -u "$ac_user" | grep -E "^HTTP") 
    HTTP_CODE=$(echo $HTTP_RESPONSE | grep "^HTTP" | awk '{print $2}')
    if [ 204 -eq $HTTP_CODE ]
    then
      echo "done."
    else
      echo $HTTP_CODE
      echo "$HTTP_CODE,$n" >> $SELF.error.log
    fi
  done
  ;;

"help")
  printf "Usage examples:\n"
  printf "  find all users with displayName oliver\n"
  printf "    aacUsers csv | xsv search -s active "true" | xsv search -i -s displayName oliver | xsv table\n"
  printf "  find accountid for displayName oliver.wihler\n"
  printf "    aacUsers csv | xsv search -s active "true" | xsv search -i -s displayName oliver.wihler | tail -n +2 | awk -F ',' '{print \$1}'\n"
  ;;

esac
